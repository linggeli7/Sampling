{
    "contents" : "# summary table\nsummary(salary95)\n# salary difference between males and females\nplot(salary ~ gender, data = salary95)\n# salary associated with rank, field and admin\nplot(salary ~ rank, data = salary95)\nplot(salary ~ field, data = salary95)\nplot(salary ~ as.factor(admin), data = salary95)\n# rank associated with gender\nplot(rank ~ gender, data = salary95)\n# field and admin not so much (precision variables)\nplot(as.factor(admin) ~ gender, data = salary95)\nplot(field ~ gender, data = salary95)\n# startyr and deg \nplot(salary ~ startyr, data = salary95)\nplot(yrdeg ~ startyr, data = salary95)\nplot(salary ~ deg, data = salary95)\n# small difference with rank\nmodel1 <- lm(salary ~ gender + field + startyr + deg + admin + rank, data=salary95)\nsummary(model1)\n# big difference without rank\nmodel2 <- lm(salary ~ gender + field + startyr + deg + admin, data=salary95)\nsummary(model2)\n# not constant variance\nplot(model2$residuals ~ model2$fitted.values)\n# hella outliers\nlibrary(car)\ninfluencePlot(model2,  id.method=\"noteworthy\", main=\"Influence Plot\")\n# log transformation does not work very well\nboxplot(salary95$salary)\nmodel2 <- lm(log(salary) ~ gender + field + startyr + deg + admin, data=salary95)\nsummary(model2)\nplot(model2$residuals ~ model2$fitted.values)\n704.471+1.961458*101.595\nqt(0.975,1589)\n\n##\n##### \tCompute robust (sandwich) variance-covariance estimate for a LM\n##\nrobust.vcov.lm <- function( lm.obj ){\n  X <- model.matrix( lm.obj )\n  eps <- lm.obj$residuals\n  robust.cov <- solve( t(X)%*%X ) %*%( t(X) %*% diag(eps^2) %*% X ) %*% solve( t(X)%*%X )\n  dimnames( robust.cov ) <- dimnames( vcov(lm.obj) )\n  return( robust.cov )\n}\n\n##\n#####\n#####\trobust.se.lm() is a function to compute the Huber-White sandwich variance estimator\n#####\tfor the linear regression model\n#####\t\n##\nrobust.se.lm <- function( model) { \n  s <- summary( model) \n  X <- model.matrix( model )\n  sandwich.cov <- robust.vcov.lm( model )\n  sand.se <- sqrt( diag( sandwich.cov )) \n  t <- model$coefficients/sand.se\n  p <- 2*pt( -abs( t ), dim(X)[1]-dim(X)[2] ) \n  ci95.lo <- model$coefficients - qt( .975, dim(X)[1]-dim(X)[2] ) * sand.se\n  ci95.hi <- model$coefficients + qt( .975, dim(X)[1]-dim(X)[2] ) * sand.se\n  rslt <- cbind( model$coefficients, sand.se, ci95.lo, ci95.hi, t, p ) \n  dimnames(rslt)[[2]] <- c( dimnames( s$coefficients )[[2]][1], \"Robust SE\", \"ci95.lo\", \"ci95.hi\", dimnames( s$coefficients )[[2]][3:4] ) \n  rslt \n} \n\nA <- matrix( nrow=1000, ncol=6) \nn <- 500\nfor( i in 1:1000 ){\n  x <- rnorm( n, mean = 1, sd = 1 )\n  mu <- 1 + 2*x\n  # e <- rnorm( n, mean = 0, sd = 1 )\n  e <- rnorm( n, mean = 0, sd = abs(mu) )\n  y <- mu + e\n  lm.fit <- lm(y ~ x)\n  b0 <- lm.fit$coefficients[1]\n  A[i,1] <- b0\n  b1 <- lm.fit$coefficients[2]\n  A[i,2] <- b1\n  b0.se <- coef(summary(lm.fit))[, \"Std. Error\"][1]\n  A[i,3] <- b0.se\n  b1.se <- coef(summary(lm.fit))[, \"Std. Error\"][2]\n  A[i,4] <- b1.se\n  b0.robust_se <- robust.se.lm(lm.fit)[1,2]\n  A[i,5] <- b0.robust_se\n  b1.robust_se <- robust.se.lm(lm.fit)[2,2]\n  A[i,6] <- b1.robust_se\n}\nc(mean(A[,1]),sd(A[,1]),mean(A[,3]),mean(A[,5]))\nc(mean(A[,2]),sd(A[,2]),mean(A[,4]),mean(A[,6]))",
    "created" : 1454728122763.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3555517011",
    "id" : "C3380A94",
    "lastKnownWriteTime" : 1453919587,
    "path" : "~/Documents/Grad School/General Linear Methods/Stats 211-3.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}